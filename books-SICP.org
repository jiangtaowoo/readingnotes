#+LaTeX_CLASS: jarticle
#+TITLE: SICP 笔记

* 基础语法
  + *define*
    #+BEGIN_SRC scheme
    (define (funcname param1 param2)  (funcbody))
    #+END_SRC
  + *cond*
    #+BEGIN_SRC scheme
    (cond (cond1 exp1)
          (cond2 exp2)
          ...
          (else elseexp))
    #+END_SRC
  + *if*
    #+BEGIN_SRC scheme
    (if predicate
        consequent
        alternative)
    #+END_SRC
  + *let*
    #+BEGIN_SRC scheme
    (let ((var1 exp1)
          (var2 exp2)
          ...
          (varn expn))
          body)
    #+END_SRC
  + *lambda*
    #+BEGIN_SRC scheme
    (lambda (p1 p2 ... pn) body)
    #+END_SRC

* 第 2 章 构造数据抽象
   数据抽象是为了站在更高的层次去思考问题, 避免陷入复杂数据结构的细节之中。
** 数据抽象导引
   数据抽象是一种方法， 它使我们能将一个复合数据对象的 *使用*, 与该数据对象怎样由
   更基本的数据对象构造起来的细节隔离开。\\
   数据抽象的基本思想，就是设法构造出一些使用复合数据对象的程序(复合数据的构造程序
   和选择程序)，使它们就像是在"抽象数据"上操作一样。
*** 有理数运算实例
    + *按愿望思维* 的强有力的综合策略\\
      *假设* make-rat, numer, denom 已经实现, 接下来该如何进行有理数的加减乘除\\
      加法 $$\frac{n_{1}}{d_{1}}+\frac{n_{2}}{d_{2}} = \frac{n_{1}d_{2}+n_{2}d_{1}}{d_{1}d_{2}}$$
      实现过程:\\
    #+BEGIN_SRC scheme
      (define (add-rat x y)
        (make-rat (+ (* (numer x) (denom y)) (* (numer y) (denom x)))
           (* (denom x) (denom y)))
    #+END_SRC
    + *练习 2.1*
    定义 make-rat 的更好版本, 使之可以正确处理正数和负数, 当有理数为正时,
      make-rat 应将其规范化, 使分子分母都是正的. 如果有理数是负数, 则应让分子为负.
    #+BEGIN_SRC scheme
      (define (make-rat n d)
        (let ((g (gcd n d)))
          (cond ((> d 0) (cons (/ n g) (/ d g)))
                ((< d 0) (cons (/ (- n) g) (/ (- d) g)))
             )))
    #+END_SRC
*** 抽象屏障
    *数据抽象* 的基本思想就是为每一类数据对象标识出一组操作, 使得对这类数据对象的
    所有操作都可以基于它们表述, 而且在操作这些数据对象时也只使用它们。
#+BEGIN_SRC
          |------------------------------------------|
    ------|             使用有理数的程序             |------
          |------------------------------------------|
                         问题域中的有理数
              |-------------------------------------|
    ----------|         add-rat sub-rat ...         |-------
              |-------------------------------------|
                      作为分子和分母的有理数
                  |------------------------------|
    --------------|     make-rat numer denom     |----------
                  |------------------------------|
                         作为序对的有理数
                      |----------------------|
    ------------------|    cons car cdr      |--------------
                      |----------------------|
#+END_SRC
    + *练习 2.2*
    线段的表示与打印
    #+BEGIN_SRC scheme
      (define (make-segment p1 p2) (cons p1 p2))
      (define (start-segment s) (car s))
      (define (end-segment s) (cdr s))
      (define (make-point x y) (cons x y))
      (define (x-point p) (car p))
      (define (y-point p) (cdr p))
      (define (midpoint-segment s)
         (define (average a b) (/ (+ a b) 2))
         (let ((p1 (start-segment s))
               (p2 (end-segment s)))
               (make-point (average (x-point p1) (x-point p2))
                           (average (y-point p1) (y-point p2))))
      (define (print-point p)
         (newline)
         (display "(")
         (display (x-point p))
         (display ",")
         (display (y-point p))
         (display ")"))
    #+END_SRC
*** 数据意味着什么
    一般而言，总可以将数据定义为一组适当的选择函数和构造函数，以及为使这些过程成为
    一套合法表示，它们必须满足的一组特定条件\\
    下面的例子展示了 *数据的过程性表示* 的概念, 有关的程序设计风格通常称为"消息传递"
    #+BEGIN_SRC scheme
    (define (cons_ x y)
      (define (dispatch m)
         (cond ((= m 0) x)
               ((= m 1) y)
               (else (error "Argument not 0 or 1 -- CONS" m))))
      dispatch)
    (define (car_ z) (z 0))
    (define (cdr_ z) (z 1))
    #+END_SRC
    + *练习 2.4*
    序对的另一种过程性表示方法
    #+BEGIN_SRC scheme
    (define (cons_ x y)
      (lambda (m) (m x y)))
    (define (car_ z) (z (lambda (p q) p)))
    (define (cdr_ z) (z (lambda (p q) q)))

    car_ 展开后为
    ((lambda (m) (m x y)) (lambda (p q) p))
    然后后面的 lambda 函数替换参数 m, 得到
    ((lambda (p q) p) x y)
    再用 x,y 替换参数 p,q 得到
    x
    #+END_SRC
    + *练习 2.5*
    a,b 的序对表示为乘积 $2^{a} \cdot 3^{b}$ , 可以只用非负整数和算术运算
      表示序对, 给出 cons, car, cdr 的定义
    #+BEGIN_SRC scheme
    (define (cons_ a b)
      (define (sqb base t)
        (if (= t 0)
            1
            (* base (sqb base (- t 1)))))
      (* (sqb 2 a) (sqb 3 b)))
    (define (extract-expt base n)
       (define (iter-extract n acc)
          (if (= (gcd base n) 1)
              acc
              (iter-extract (/ n base) (+ 1 acc))))
       (iter-extract n 0))
    (define (car_ z) (extract-expt 2 z))
    (define (cdr_ z) (extract-expt 3 z))
    ;(define (car_ z)
    ;   (define (bqs base t)
    ;      (if (= (gcd base t) 1)
    ;          0
    ;          (+ 1 (bqs base (/ t base)))))
    ;   (bqs 2 z))
    ;(define (cdr_ z)
    ;   (define (bqs base t)
    ;      (if (= (gcd base t) 1)
    ;          0
    ;          (+ 1 (bqs base (/ t base)))))
    ;   (bqs 3 z))
    #+END_SRC
    + *练习 2.6*
    不用数字来定义 One, Two 以及加法(Church 计数)
    #+BEGIN_SRC scheme
    (define zero (lambda (f) (lambda (x) x)))
    (define (add-1 n)
       (lambda (f) (lambda (x) (f ((n f) x)))))

    (add-1 zero) 的代换过程
    (lambda (f) ...), 其中 n 被替换为 zero, 结果仍然是一个匿名函数, 接收参数为 f
    (zero  f)代换得到一个匿名函数
    (lambda (x) x), 该匿名函数继续以 x 为参数运算得到 x
    因此最后得到的函数体如下, 含义是, 对输入的数据/过程, 再应用一次 f(应用一次 f 就是一次计数)
    (lambda (x) (f x))
    总体结果为
    (lambda (f) (lambda (x) (f x)))

    (define one (lambda (f) (lambda (x) (f x))))
    (define two (lambda (f) (lambda (x) (f (f x)))))
    (define (add a b)
      (lambda (f) (lambda (x) ((a f) ((b f) x) ))))
    #+END_SRC
*** 扩展练习: 区间算术
    + *练习 2.7*
    #+BEGIN_SRC scheme
      (define (upper-bound x)
        (let ((a (car x))
              (b (cdr x)))
           (if (> a b)
               (+ a)
               (+ b))))
      (define (lower-bound x)
        (let ((a (car x))
              (b (cdr x)))
           (if (> a b)
               (+ b)
               (+ a))))
    #+END_SRC
    + *练习 2.8*
    #+BEGIN_SRC scheme
      (define (add-interval x y)
        (make-interval (+ (lower-bound x) (lower-bound y))
                       (+ (upper-bound x) (upper-bound y))))
      (define (sub-interval x y)
        (make-interval
        (- (lower-bound x) (upper-bound y))
        (- (upper-bound x) (lower-bound y))))
      (define (sub-interval x y)
        (add-interval x (make-interval (- (lower-bound y)) 
                                       (- (upper-bound y)))))
    #+END_SRC
    + *练习 2.12*
    #+BEGIN_SRC scheme
      (define (make-center-percent c p)
        (make-interval (* (- 1 p) c)
                       (* (+ 1 p) c)))
      (define (percent i)
        (/ (/ (- (upper-bound i) (lower-bound i)) 2)
        (/ (+ (upper-bound i) (lower-bound i)) 2)))
    #+END_SRC
    + *练习 2.16*
    区间算术缺陷的根本原因在于区间运算的本质是不确定性的累积运算，
    其+-运算并不是互逆的，*/运算也不是互逆的，例如 A+A-A 的结果并不等于 A
    相加运算的含义是两个区间不确定性的叠加；相减也仍然是另一种不确定性的叠加

** 层次性数据和闭包性质
   *闭包* 术语来自抽象代数, 一集元素称在某个运算(操作)之下封闭，如果将该运算应用与这一集合的元素，产生出的仍然是该集合的元素; 闭包也表示带有自由变量的过程而是用的实现技术；本书说的闭包不采用以上任何意义
   *闭包* 某种组合数据对象的操作满足闭包性质，如果通过它组合得到的结果本身还可以通过同样的操作再进行组合
*** 序列的表示
   (cons 1 (cons 2 (cons 3 (cons 4 nil) 等价于 (list 1 2 3 4)
   #+BEGIN_SRC scheme
     ;;获取列表的第 n 项元素
     (define (list-ref items n)
        (if (= n 0)
            (car items)
            (list-ref (cdr items) (- n 1))))
     ;;append list1 list2
     ;;(cons 1 (cons 2 (cons 3 nil)))    (cons 5 (cons 6 nil))
     ;;(cons 1 (cons 2 (cons 3 (cons 5 (cons 6 nil)))))
     (define (my-append list1 list2)
        (if (null? list1)
            list2
            (cons (car list1) (my-append (cdr list1) list2))))
   #+END_SRC
    + *练习 2.17*
   #+BEGIN_SRC scheme
     ;;(last-pair (list 1 2 3 4))
     ;;(4)
     (define (last-pair items)
       (let ((tail (cdr items)))
        (if (null? tail)
            items
            (last-pair tail))))
   #+END_SRC
    + *练习 2.18*
   #+BEGIN_SRC scheme
     ;;(reverse (list 1 2 3 4))
     ;;(4 3 2 1)
     ;;不正确版本, 输出  ((((4) . 3) . 2) . 1)
     ;;(cons (cons (cons (cons 4 ) 3 ) 2 ) 1 )
     ;;应该是 (cons 4 (cons 3 (cons 2 (cons 1))))
     (define (my-reverse items)
       (let ((tail (cdr items)))
        (if (null? tail)
            items
            (cons (my-reverse tail) (car items)))))
     (define (my-reverse items)
       (define (iter-rev subitems answer)
          (if (null? subitems)
              answer
              (iter-rev (cdr subitems) (cons (car subitems) answer))))
       (iter-rev items nil))
   #+END_SRC
    + *练习 2.20*
   #+BEGIN_SRC scheme
     ;;(same-pair (list 1 2 3 4))
     ;;(1 3)
     (define (same-pair a . b)
      (let ((gcda (gcd a 2))
            (ab (cons a b)))
        (define (iter-same-pair items answer)
          (if (null? items)
            answer
            (if (= gcda (gcd (car items) 2))
                (iter-same-pair (cdr items) (cons (car items) answer))
                (iter-same-pair (cdr items) answer))))
       (my-reverse (iter-same-pair ab '()))))
   #+END_SRC
   
    + *练习 2.21*
   #+BEGIN_SRC scheme
     (define nil '())
     ;;map
     (define (map proc items)
       (if (null? items)
         nil
         (cons (proc (car items)) 
               (map proc (cdr items)))))

     (define (square-list items)
       (if (null? items)
         nil
         (cons (* (car items) (car items))
               (square-list (cdr items)))))

     (define (square-list items)
        (map (lambda (x) (* x x)) items))
   #+END_SRC

    + *练习 2.23*
   #+BEGIN_SRC scheme
     (define nil '())
     ;;map
     (define (for-each proc items)
       (cond ((null? items)
         nil)
         (else
           (proc (car items))
           (for-each proc (cdr items)))))

   #+END_SRC
   
*** 层次性结构
    + *练习 2.27*
   #+BEGIN_SRC scheme
     ;;(deep-reverse (list (list 1 2) (list 3 4)))
     ;;((4 3) (2 1))
     (define (deep-reverse items)
        (cond ((null? items) nil)
              ((not (pair? items)) items)
              (else 
                (append (deep-reverse (cdr items)) 
                        (list (deep-reverse (car items)))))))
   #+END_SRC
    + *练习 2.28*
   #+BEGIN_SRC scheme
     ;;(fringe (list (list 1 2) (list 3 4)))
     ;;(1 2 3 4)
     (define (fringe items)
        (cond ((null? items) nil)
              ((not (pair? items)) (list items))
              (else 
                (append (fringe (car items)) 
                        (fringe (cdr items))))))
   #+END_SRC
    + *练习 2.29*
   #+BEGIN_SRC scheme
     ;;二叉活动体
     (define (make-mobile left right)
       (list left right))
     (define (make-branch length structure)
       (list length structure))
     (define (left-branch m)
       (car m))
     (define (right-branch m)
       (car (cdr m)))
     (define (branch-length b)
       (car b))
     (define (branch-structure b)
       (car (cdr b)))
     ;;计算 weight
     (define (branch-end? b)
       (not (pair? (branch-structure b))))
     (define (branch-weight b)
       (define (iter-branch-weight b acc)
         (let ((bs (branch-structure b)))
         (if (branch-end? b)
           (+ acc bs)
           (+ acc 
               (iter-branch-weight (left-branch bs) 0)
               (iter-branch-weight (right-branch bs) 0)))))
         (iter-branch-weight b 0))
     (define (total-weight m)
       (+ (branch-weight (left-branch m)) (branch-weight (right-branch m))))
      ;;活动体平衡判断
     (define (branch-wl b)
       (* (branch-length b) (branch-weight b)))
     (define (mobile-balance? m)
         (let (
                (lb (left-branch m))
                (rb (right-branch m))
                (curacc (= 
                          (branch-wl (left-branch m)) 
                          (branch-wl (right-branch m)))))
              (and curacc
                   (if (branch-end? lb)
                       #t
                       (mobile-balance? (branch-structure lb)))
                   (if (branch-end? rb)
                       #t
                       (mobile-balance? (branch-structure rb))))))
   #+END_SRC

*** 序列作为一种约定的界面
    将程序表示为一些针对序列的操作，帮助我们得到模块化的程序设计
    + *练习 2.33*
    使用 accumulate 重新定义 map, append, length
   #+BEGIN_SRC scheme
     (define (accumulate op initial sequence)
       (if (null? sequence)
           initial
           (op (car sequence)
               (accumulate op initial (cdr sequence)))))
     (define (map p sequence)
       (accumulate (lambda (x y) (cons (p x) y)) nil sequence))
     (define (append seq1 seq2)
       (accumulate cons seq2 seq1))
     (define (length seq)
       (accumulate (lambda (x y) (+ 1 y)) 0 seq))
   #+END_SRC
    + *练习 2.34*
   #+BEGIN_SRC scheme
     (define (horner-eval x coeff-seq)
       (accumulate (lambda (this-coeff higher-terms) 
                           (+ this-coeff (* x higher-terms)))
                   0 
                   coeff-seq))
   #+END_SRC
    + *练习 2.35*
   #+BEGIN_SRC scheme
     (define (count-leaves t)
       (accumulate (lambda (left right) 
                           (+ 1 right))
                   0 
                   (map + (fringe t))))
   #+END_SRC
    + *练习 2.36*
   #+BEGIN_SRC scheme
     (define (accumulate-n op init seqs)
       (if (null? (car seqs))
           nil
           (cons (accumulate op init 
                             (accumulate 
                                (lambda (x y) (cons (car x) y)) nil seqs))
                 (accumulate-n op init 
                             (accumulate 
                                (lambda (x y) (cons (cdr x) y)) nil seqs)))))
   #+END_SRC
    + *练习 2.38*
   #+BEGIN_SRC scheme
     (define fold-right accumulate)
     (define (fold-left op init seqs)
       (define (iter result rest)
         (if (null? rest)
             result
             (iter (op result (car rest))
                   (cdr rest))))
       (iter init seqs))
     ;;reverse 定义
     (define (reverse seqs)
       (fold-right (lambda (x rest) (append rest (list x)))
                   nil seqs))
     (define (reverse seqs)
       (fold-left (lambda (rest x) (append (list x) rest))
                   nil seqs))
     (define (reverse seqs)
       (fold-left (lambda (rest x) (cons x rest))
                   nil seqs))
   #+END_SRC

*** 嵌套映射
   #+BEGIN_SRC scheme
     (define (flatmap proc seq)
       (accumulate append nil (map proc seq)))
     (define (make-range start end)
       (define (iter-make-range start end acc)
         (if (> start end)
             acc
             (iter-make-range (+ start 1) end (append acc (list start)))))
       (iter-make-range start end nil))
     (define (make-range start end)
        (if (> start end)
            nil
            (cons start (make-range (+ start 1) end))))
           
   #+END_SRC
    + *练习 2.40*
   #+BEGIN_SRC scheme
     (define (unique-pairs n)
       (flatmap (lambda (i)
                  (map (lambda (j) (list j i))
                       (make-range 1 (- i 1))))
                (make-range 1 n)))
     (define (prime-sum? pair)
       (prime? (+ (car pair) (cadr pair))))
     (define (prime? x)
       (define (iter-prime? x n acc)
         (if (> (* n n) x)
             acc
             (iter-prime? x (+ n 1) (and acc (= 1 (gcd x n))))))
       (iter-prime? x 2 #t))
     (define (make-pair-sum pair)
       (list (car pair) (cadr pair) (+ (car pair) (cadr pair))))
     (define (prime-sum-pairs n)
       (map make-pair-sum (filter prime-sum? (unique-pairs n))))
   #+END_SRC
    + *练习 2.41*
   #+BEGIN_SRC scheme
     (define (unique-tripes n)
       (flatmap (lambda (i)
                  (flatmap (lambda (j) 
                             (map (lambda (k) 
                                    (list k j i))
                                  (make-range 1 (- j 1))))
                           (make-range 1 (- i 1))))
                (make-range 1 n)))
     (define (tripe-sum n s)
       (filter (lambda (x) (= s (+ (car x) (cadr x) (caddr x))))
               (unique-tripes n)))
   #+END_SRC
    + *练习 2.42*
   #+BEGIN_SRC scheme
     (define empty-board '())
     ;;((r,c1),(r,c2),....)
     (define (adjoin-position new-row k rest-of-queens)
        (append rest-of-queens (list (list new-row k))))
     ;;position conflict
     (define (position-conflict? pos1 pos2)
       (let (
             (row1 (car pos1))
             (col1 (cadr pos1))
             (row2 (car pos2))
             (col2 (cadr pos2)))
         (and (not (= row1 row2)) 
              (not (= (- row1 col1) (- row2 col2)))
              (not (= (+ row1 col1) (+ row2 col2))))))
     ;;is safe position or not
     (define (safe? k positions)
       (let ((k-pos (car (reverse positions))))
         (define (iter-safe k positions col-check result)
           (if (and (> k 1) (< col-check k))
               (let ((rest-positions (cdr positions))
                     (cur-result (and result 
                                      (position-conflict? k-pos (car positions)))))
                    (iter-safe k rest-positions (+ 1 col-check) cur-result))
               result))
         (iter-safe k positions 1 #t)))
     ;;八皇后问题
     (define (queens board-size)
       (define (queen-cols k)
         (if (= k 0)
             (list empty-board)
             (filter
                (lambda (positions)
                        (safe? k positions))
                (flatmap
                   (lambda (rest-of-queens)
                      (map (lambda (new-row)
                              (adjoin-position new-row k rest-of-queens))
                           (make-range 1 board-size)))
                   (queen-cols (- k 1))))))
       (queen-cols board-size))
   #+END_SRC
** 符号数据
*** 引号
   #+BEGIN_SRC scheme
     (define (memq item x)
       (cond ((null? x) #f)
             ((eq? item (car x)) x)
             (else (memq item (cdr x)))))
   #+END_SRC
    + *练习 2.54*
   #+BEGIN_SRC scheme
     (define (equalx? a b)
       (cond ((and (not (pair? a)) (not (pair? b))) (eq? a b))
             ((and (pair? a) (pair? b))
              (and (equalx? (car a) (car b)) (equalx? (cdr a) (cdr b))))
             (else #f)))
   #+END_SRC
*** 实例: 符号求导
    + *练习 2.56*
   #+BEGIN_SRC scheme
     (define (variable? x) (symbol? x))
     (define (same-variable? v1 v2)
       (and (variable? v1) (variable? v2) (eq? v1 v2)))
     (define (=number? exp num)
       (and (number? exp) (= exp num)))
     (define (make-sum a1 a2)
       (cond ((=number? a1 0) a2)
             ((=number? a2 0) a1)
             ((and (number? a1) (number? a2)) (+ a1 a2))
             (else (list '+ a1 a2))))
     ;;加法支持多个参数
     (define (make-sum . listx)
       (define (iter-make-sum acc items)
         (cond ((null? items) acc)
               ((number? (car items))
                (iter-make-sum (cons (+ (car acc) (car items)) (cdr acc))
                               (cdr items)))
               (else
                (iter-make-sum (append acc (list (car items))) 
                               (cdr items)))))
       (let ((result (iter-make-sum (list 0) listx)))
            (if (null? (cdr result))
                (car result)
                (if (= (car result) 0)
                    (if (null? (cddr result))
                        (cadr result)
                        (cons '+ (cdr result)))
                    (cons '+ result)))))
     (define (make-product m1 m2)
       (cond ((or (=number? m1 0) (=number? m2 0)) 0)
             ((=number? m1 1) m2)
             ((=number? m2 1) m1)
             ((and (number? m1) (number? m2)) (* m1 m2))
             (else (list '* m1 m2))))
     ;;乘法支持多个参数
     (define (make-product . listx)
       (define (iter-make-prod acc items)
         (cond ((null? items) acc)
               ((number? (car items))
                (iter-make-prod (cons (* (car acc) (car items)) (cdr acc))
                               (cdr items)))
               (else
                (iter-make-prod (append acc (list (car items))) 
                               (cdr items)))))
       (let ((result (iter-make-prod (list 1) listx)))
            (if (null? (cdr result))
                (car result)
                (cond ((= (car result) 1) 
                       (if (null? (cddr result))
                           (cadr result)
                           (cons '* (cdr result))))
                      ((= (car result) 0) 0)
                      (else 
                        (cons '* result))))))
     (define (sum? x)
       (and (pair? x) (eq? (car x) '+)))
     (define (addend s) (cadr s))
     (define (augend s) (caddr s))
     ;;加法支持多个参数
     (define (augend s) 
       (if (null? (cdr (cddr s))) 
           (caddr s)
           (cons '+ (cddr s))))
     (define (product? x)
       (and (pair? x) (eq? (car x) '*)))
     (define (multiplier p) (cadr p))
     (define (multiplicand p) (caddr p))
     ;;乘法支持多个参数
     (define (multiplicand p) 
       (if (null? (cdr (cddr p))) 
           (caddr p)
           (cons '* (cddr p))))
     (define (exponentiation? x)
       (and (pair? x) (eq? (car x) '**)))
     (define (base x) (cadr x))
     (define (exponent x) (caddr x))
     (define (calc-exp b e)
       (if (< e 0)
        (/ 1 (calc-exp b (- e)))
        (cond ((= e 0) 1)
              ((= e 1) b)
              (else (* b (calc-exp b (- e 1)))))))
     (define (make-exponentiation b e)
       (cond ((=number? e 0) 1)
             ((=number? e 1) b)
             ((=number? b 1) 1)
             ((and (number? b) (number? e)) (calc-exp b e))
             (else (list '** b e))))
     ;;符号求导
     (define (deriv exp var)
       (cond ((number? exp) 0)
             ((variable? exp)
              (if (same-variable? exp var) 1 0))
             ((sum? exp)
              (make-sum (deriv (addend exp) var)
                        (deriv (augend exp) var)))
             ((product? exp)
              (make-sum (make-product (multiplier exp) 
                                      (deriv (multiplicand exp) var))
                        (make-product (multiplicand exp)
                                      (deriv (multiplier exp) var))))
             ((exponentiation? exp)
              (make-product (exponent exp) 
                            (make-exponentiation (base exp) 
                                                 (make-sum (exponent exp) (- 1))) 
                            (deriv (base exp) var)))
             (else
               (error "unknown expression type -- DERIV" exp))))
     ;;符号求导(不支持乘法多参数)
     (define (deriv exp var)
       (cond ((number? exp) 0)
             ((variable? exp)
              (if (same-variable? exp var) 1 0))
             ((sum? exp)
              (make-sum (deriv (addend exp) var)
                        (deriv (augend exp) var)))
             ((product? exp)
              (make-sum (make-product (multiplier exp) 
                                      (deriv (multiplicand exp) var))
                        (make-product (multiplicand exp)
                                      (deriv (multiplier exp) var))))
             ((exponentiation? exp)
              (make-product (exponent exp) 
                            (make-product (make-exponentiation 
                                            (base exp) 
                                            (make-sum (exponent exp) (- 1))) 
                                          (deriv (base exp) var))))
             (else
               (error "unknown expression type -- DERIV" exp))))
   #+END_SRC
*** 实例: 集合的表示
   #+BEGIN_SRC scheme
   #+END_SRC
** 抽象数据的多重表示

** 带有通用型操作的系统
